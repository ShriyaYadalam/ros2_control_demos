# amcl:
#   ros__parameters:
#     use_sim_time: False
#     alpha1: 0.2
#     alpha2: 0.2
#     alpha3: 0.2
#     alpha4: 0.2
#     alpha5: 0.2 #NOISE PARAMETERS
#     base_frame_id: "base_link"
#     beam_skip_distance: 0.5
#     beam_skip_error_threshold: 0.9
#     beam_skip_threshold: 0.3
#     do_beamskip: false
#     global_frame_id: "map"
#     lambda_short: 0.1
#     laser_likelihood_max_dist: 2.0
#     laser_max_range: 15.0 #100.0
#     laser_min_range: 0.1 #-1.0
#     laser_model_type: "likelihood_field"
#     max_beams: 60
#     max_particles: 5000 #2000
#     min_particles: 1000 #500
#     odom_frame_id: "odom"
#     pf_err: 0.05
#     pf_z: 0.99
#     recovery_alpha_fast: 0.1
#     recovery_alpha_slow: 0.001
#     resample_interval: 1 
#     robot_model_type: "nav2_amcl::DifferentialMotionModel"
#     save_pose_rate: 0.5
#     sigma_hit: 0.2
#     tf_broadcast: true
#     transform_tolerance: 2.0
#     update_min_a: 0.1 #0.2 It updates after this minimum distance travelled - translational & rotational
#     update_min_d: 0.1 #0.25 #TRIGGER UPDATES MORE OFTEN
#     z_hit: 0.5 #Probability that laser scans match the map  0.5
#     z_max: 0.05 #0.05
#     z_rand: 0.3 #Probability that laser scans are from random unpredicted obstacles 0.5
#     z_short: 0.15 #0.05
#     scan_topic: scan

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 30 #10 BCS sometimes error pops up - 'BT tick rate exceeded'
    default_server_timeout: 20
    wait_for_service_timeout: 1000 

    default_nav_to_pose_bt_xml: /home/rpi_ws/src/ros2_control_demos/example_2/nav2_config/behavior_trees/custom_navigate_bt.xml

    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.01
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.2 #0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] 
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.4
      movement_time_allowance: 10.0 #10.0 IF THIS TIME IS TOO LESS, IF STUCK IN PLACES WITH TOO MANY OBSTACLES, IT KEEPS OSCILLATING BETWEEN 2 PATH DECISIONS
      #AS THE PROGRESS MADE IS NOT ENOUGH. 

    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True

    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::StoppedGoalChecker" 
      xy_goal_tolerance: 0.25 #0.3
      yaw_goal_tolerance: 0.3 #0.4 


    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
        #Tried out TEB as well but faced issues like - too jittery, too many params 
      debug_trajectory_details: True
      min_vel_x: -0.19 #ENABLING BACKWARD MOTION
      min_vel_y: 0.0 
      max_vel_x: 0.19 #0.26
      max_vel_y: 0.0
      max_vel_theta: 0.3  #0.8 #1
      min_speed_xy: 0.0
      max_speed_xy: 0.18 #0.26
      min_speed_theta: 0.0
      acc_lim_x: 2.0 #2.5
      acc_lim_y: 0.0
      acc_lim_theta: 2.0 #3.2
      decel_lim_x: -2.0
      decel_lim_y: 0.0
      decel_lim_theta: -2.0 #-3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 0.8 #SHORTER SIM TIME -> LESSER OVERTHINKING 
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25 #0.3
      yaw_goal_tolerance: 0.3 #0.4
      trans_stopped_velocity: 0.02 #0.25 lol L
      rot_stopped_velocity: 0.01 
      short_circuit_trajectory_evaluation: True
      stateful: True

      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0 
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 40.0 #make this 15/25 if too jittery TO PRIORITIZE ALIGNING TO GOAL OVER PATH 
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 40.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      Oscillation.scale: 1.0 
      RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      robot_radius: 0.19 #0.22
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 8.0 #INCREASED FROM 3->8 TO AVOID OBSTACLES BETTER 
        inflation_radius: 0.25 #0.5
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      robot_radius: 0.19 #0.22
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.3 #0.55
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: False
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: False  
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner" 
        #Tried using SMAC - but had several issues - Took longer to compute paths, no valid path found several times, more spins, overly convoluted paths
      tolerance: 0.5 #MIGHT HAVE TO DECREASE
      use_astar: false 
      allow_unknown: true

smoother_server: 
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 20.0  
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: false
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.5
    min_rotational_vel: 0.6
    rotational_acc_lim: 3.5 
    backup_dist: 0.6 
    backup_speed: 0.2
    spin_dist: 0.785 

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    use_sim_time: False
    loop_rate: 20
    stop_on_failure: false 
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: False
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.26, 0.0, 1.0]
    min_velocity: [-0.26, 0.0, -1.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

# slam_toolbox:
#   ros__parameters:
#     # Use filtered odometry instead of raw
#     odom_frame: odom
#     base_frame: base_link
#     map_frame: map
    
#     # CRITICAL: Tell SLAM to use filtered odometry
#     use_scan_matching: true
#     use_scan_barycenter: true
    
#     # Optional: If you want to be explicit about the odom topic
#     odom_topic: /odometry/filtered  # Uncomment if needed
    
#     # Basic SLAM parameters
#     mode: mapping
#     resolution: 0.05
#     max_laser_range: 20.0
#     minimum_travel_distance: 0.5
#     minimum_travel_heading: 0.5
    
#     # For better performance with obstacles
#     scan_buffer_size: 10
#     scan_buffer_maximum_scan_distance: 10.0
#     link_match_minimum_response_fine: 0.1
#     link_scan_maximum_distance: 1.5
#     loop_search_maximum_distance: 3.0
    
#     # Transform settings
#     transform_publish_period: 0.02
#     map_update_interval: 5.0